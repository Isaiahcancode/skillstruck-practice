#make game more fair
import pygame
import random

pygame.init()

# Constants
box_len = 900
box_height = 900
color_1 = (0, 0, 0)  # black
color_2 = (204, 51, 0)  # reddish orange
color_3 = (255, 255, 255)  # white
color_4 = (213, 200, 80)  # dark yellow
color_5 = (0, 255, 0)  # green
color_6 = (255, 0, 0)  # red

add_caption = pygame.display.set_mode((box_len, box_height))
pygame.display.set_caption("SNAKE GAME")

timer = pygame.time.Clock()
snake_block = 10
snake_speed = 15

display_style = pygame.font.SysFont("arial", 30, "bold")
score_font = pygame.font.SysFont("arial", 45, "bold")

def final_score(score):
    value = score_font.render("Enjoy the snake game -------- Your score is: " + str(score), True, color_2)
    add_caption.blit(value, [20, 20])

def make_snake(snake_block, list_snake):
    for x in list_snake:
        pygame.draw.rect(add_caption, color_3, [x[0], x[1], snake_block, snake_block])

def display_msg(msg, color):
    mssg = display_style.render(msg, True, color)
    add_caption.blit(mssg, [box_len / 6, box_height / 3])

def main_menu():
    while True:
        add_caption.fill(color_1)
        add_caption.blit(display_style.render("Welcome", True, color_5), (box_len / 6, box_height / 3))
        add_caption.blit(display_style.render("Press P to Play", True, color_2), (box_len / 6, box_height / 3 + 40))
        add_caption.blit(display_style.render("Press Q to Quit", True, color_4), (box_len / 6, box_height / 3 + 80))

        pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_p:
                    game_start()
                if event.key == pygame.K_q:
                    pygame.quit()
                    quit()

def spawn_enemy():
    enemy_x = round(random.randrange(0, box_len - snake_block) / 10.0) * 10.0
    enemy_y = round(random.randrange(0, box_height - snake_block) / 10.0) * 10.0
    return [enemy_x, enemy_y]

# Corrected enemy position variable name and added chasing behavior
def move_enemy_chase(enemy_position, player_position):
    if enemy_position[0] < player_position[0]:
        enemy_position[0] += snake_block  # Move right
    elif enemy_position[0] > player_position[0]:
        enemy_position[0] -= snake_block  # Move left

    if enemy_position[1] < player_position[1]:
        enemy_position[1] += snake_block  # Move down
    elif enemy_position[1] > player_position[1]:
        enemy_position[1] -= snake_block  # Move up

    return enemy_position

def game_start():
    global snake_speed

    game_over = False
    game_close = False

    value_x1 = box_len / 2
    value_y1 = box_height / 2
    new_x1 = 0
    new_y1 = 0

    list_snake = []
    snake_len = 1
    food_collected = 0

    foodx_pos = round(random.randrange(0, box_len - snake_block) / 10.0) * 10.0
    foody_pos = round(random.randrange(0, box_height - snake_block) / 10.0) * 10.0

    enemy_snake = None
    enemy_position = None

    while not game_over:
        while game_close:
            add_caption.fill(color_6)
            display_msg("You lost! Press C to play again or Q to quit", color_4)
            final_score(snake_len - 1)
            pygame.display.update()

            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_q:
                        game_over = True
                        game_close = False
                    if event.key == pygame.K_c:
                        snake_speed = 15
                        game_start()
                        return

                if event.type == pygame.QUIT:
                    game_over = True
                    game_close = False

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT and new_x1 == 0:
                    new_x1 = -snake_block
                    new_y1 = 0
                elif event.key == pygame.K_RIGHT and new_x1 == 0:
                    new_x1 = snake_block
                    new_y1 = 0
                elif event.key == pygame.K_UP and new_y1 == 0:
                    new_y1 = -snake_block
                    new_x1 = 0
                elif event.key == pygame.K_DOWN and new_y1 == 0:
                    new_y1 = snake_block
                    new_x1 = 0

        value_x1 += new_x1
        value_y1 += new_y1

        if value_x1 >= box_len or value_x1 < 0 or value_y1 >= box_height or value_y1 < 0:
            game_close = True

        add_caption.fill(color_1)
        pygame.draw.rect(add_caption, color_5, [foodx_pos, foody_pos, snake_block, snake_block])
        snake_head = [value_x1, value_y1]
        list_snake.append(snake_head)

        if len(list_snake) > snake_len:
            del list_snake[0]

        for x in list_snake[:-1]:
            if x == snake_head:
                game_close = True

        make_snake(snake_block, list_snake)
        final_score(snake_len - 1)

        # Check if snake collects food
        if value_x1 == foodx_pos and value_y1 == foody_pos:
            foodx_pos = round(random.randrange(0, box_len - snake_block) / 10.0) * 10.0
            foody_pos = round(random.randrange(0, box_height - snake_block) / 10.0) * 10.0
            snake_len += 1
            snake_speed += 1
            food_collected += 1

            if food_collected == 5 and enemy_snake is None:
                enemy_snake = spawn_enemy()
                enemy_position = enemy_snake
                print(f"Enemy Snake Spawned at: {enemy_snake}")

        # Choose enemy movement behavior
        if enemy_position:
            enemy_position = move_enemy_chase(enemy_position, [value_x1, value_y1])  # Use the chasing function
            pygame.draw.rect(add_caption, color_6, [enemy_position[0], enemy_position[1], snake_block, snake_block])
            
            # Check for collision with the enemy snake
            if snake_head == enemy_position:
                print("Collision with enemy snake detected!")
                game_close = True

        pygame.display.update()
        timer.tick(snake_speed)

    pygame.quit()
    quit()

main_menu()
